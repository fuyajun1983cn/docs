#+TITLE: CSS3学习笔记

* 选择器
  
** 属性选择器
   1. [att=val]
   2. [att*=val]
      如果元素用att表示的属性之属性值中包含用val指定的字符的话，则该元
      素使用这个样式。
   3. [att^=val]
      如果元素用att表示的属性之属性值的开头字符为用val指定的字符的话,
      则该元素使用这个样式。
   4. [att$=val]
      如果元素用att表示的属性之属性值的结尾字符为用val指定的字符的话,
      则该元素使用这个样式。

** 伪类选择器
   伪类选择器是CSS中已经定义好的选择器，不能随便起名。
   在CSS中，常用的伪类选择器是使用在a(锚)元素上的几种选择器，它们的使
   用方法如下：
   #+BEGIN_SRC html
     a:link { }
     a:visited { }
     a:hover { }
     a:active {}
   #+END_SRC
*** 伪元素选择器
    伪元素选择器是针对CSS中已经定义好的伪元素使用的选择器，它的使用方
    法如下：
    : 选择器：伪元素{属性：值}
    伪元素也可以与类配合使用，使用方法如下：
    : 选择器 类名：伪元素{属性：值}

    在CSS中，主要有如下4个伪元素选择器：
    - first-line
      为元素中的第一行方案使用样式。
    - first-letter
      为元素中的文字首字母或第一个字使用样式。
    - before
      在某元素之前插入一些内容。
    - after
      在某元素之后插入一些内容。
*** 结构性伪类选择器
    1. root选择器
       将样式绑定到页面的根元素中。
       #+BEGIN_SRC html
         <style type="text/css">
           :root{
           background-color: yellow;
           }
           body{
           background-color: limegreen;
           }
         </style>       
       #+END_SRC
    2. not选择器
       #+BEGIN_SRC html
         <style type="text/css">
           body *:not(h1) {
           background-color: yellow;
           }
         </style>       
       #+END_SRC
    3. empty选择器
       指定当元素内容为空时的样式
       #+BEGIN_SRC html
         <style type="text/css">
           :empty {
           background-color: yellow;
           }
         </style>       
       #+END_SRC
    4. target选择器
       对页面中某个target元素（该元素的id被当做页面中的超链接来使用）
       指定样式，该样式只在用户点击了页面中的超链接，并且跳转到target
       元素后起作用。
*** 子元素选择器
    first-child, last-child, nth-child, nth-last-child.

    nth-of-type, nth-last-type.
    
    针对同类型的子元素

    only-child

    当父元素只有一个子元素才有的样式。
*** UI元素状态伪类选择器
    共有11种：E:hover, E:active, E:focus, E:enabled, E:disabled,
    E:read-only, E:read-write, E:checked, E:default, E:indeterminate,
    E::selection.
*** 通用兄弟元素选择器
    : 子元素-兄弟元素{}
** 使用选择器插入内容
*** 插入文字
    #+BEGIN_SRC html
      h2:before {
      content: 'COLUM';
      }    
    #+END_SRC

    指定个别元素不进行插入：

    #+BEGIN_SRC html
      h2.sample.before {
       content: none
      }

      <h2 class="sample">标题2</h2>
    #+END_SRC

    none也可以改为 normal，但是none只能用于 before , after两种选择器，
    而normal可用于其他用来插入内容的选择中。
*** 播放图像文件
    #+BEGIN_SRC html
      h2:before {
      content: url(mark.png);
      }

      <h2>你好</h2>
    #+END_SRC
*** 使用content属性播放项目编号
    #+BEGIN_SRC html
      h1:before {
      content: counter(mycounter);
      }
      h1 {
      counter-increment: mycounter;
      }    
    #+END_SRC
* 文字与字体
** 文字阴影
   text-shadow的使用方法如下：
   : textshadow length length length color
   前面三个length分别指阴影离开文字的横方向距离、阴影离开文字的纵方向
   距离和阴影的模糊半径,color指阴影的颜色。
** 文本自动换行
   使用 word-break 属性来自己决定自动换行的处理方法。
** 使用服务器端字体
   @font-face属性的使用方法如下：
   #+BEGIN_SRC html
     @font-face {
     font-family: WebFont;
     src: url('fonts/maotizi.ttf') format("truetype");
     font-weight: normal;
     }   
   #+END_SRC

   本地端字体：
   #+BEGIN_SRC html
     @font-face {
     font-family: Arial;
     src: local('Arial');
     }   
   #+END_SRC
** 保持字体大小不变
   使用 font-size-ajust 属性可以在字体发生变化的情况下，保持字体大小不
   变。
* 盒相关样式
** 盒的类型
*** 盒的基本类型
    CSS中的盒分为block类型和inline类型.div与p元素属于block类型,而span
    和a元素属于inline类型.
*** inline-block类型
    属于block类型盒中的一种,但是在显示时具有inline类型盒的特点.
    可用于在一行中并列显示多个block类型的元素.

    #+CAPTION: 使用inline-block类型来显示水平菜单
    #+BEGIN_SRC html
      <!DOCTYPE html>
      <html>

      <head>
          <meta charset="utf-8"/>
          <style type="text/css">
              ul {
                  margin: 0;
                  padding: 0;
              }
              li {
                  display: inline-block;
                  width: 100px;
                  padding: 10px 0;
                  background-color: #00ccff;
                  border: solid 1px #666666;
                  text-align: center;
              }
              a {
                  color: #000000;
                  text-decoration: none;
              }
          </style>
      </head>
      <body>
          <ul>
              <li><a href="#">菜单1</a></li>
              <li><a href="#">菜单2</a></li>
              <li><a href="#">菜单3</a></li>
              <li><a href="#">菜单4</a></li>
          </ul>
      </body>
      </html>    
    #+END_SRC
*** inline-table类型
    table默认是block类型,table与前后的文字不会显示在同一行,可以将table
    的显示类型改为inline-table,就可以与前后的文字显示在同一行了.

    #+BEGIN_SRC html
      <!DOCTYPE html>
      <html>

      <head>
          <meta charset="utf-8" />
          <style type="text/css">
              table {
                  display: inline-table;
                  border: solid 3px #00aaff;
                  vertical-align: bottom;
              }
          </style>
      </head>

      <body>
          你好.
          <table>
              <tr>
                  <td>A</td>
                  <td>B</td>
                  <td>C</td>
                  <td>D</td>
                  <td>E</td>
              </tr>
              <tr>
                  <td>F</td>
                  <td>G</td>
                  <td>H</td>
                  <td>I</td>
                  <td>J</td>
              </tr>
              <tr>
                  <td>K</td>
                  <td>L</td>
                  <td>M</td>
                  <td>N</td>
                  <td>O</td>
              </tr>
          </table>
          你好
      </body>
      </html>    
    #+END_SRC
*** list-item类型
    如果在display属性中将元素的类型设置为list-item类型,则可以将多个元
    素作为列表来显示,同时在元素的开头加上列表的标记.

    #+BEGIN_SRC html
      <!DOCTYPE html>
      <html>

      <head>
          <meta charset="utf-8" />
          <style type="text/css">
              div {
                  display: list-item;
                  list-style-type: circle;
                  margin-left: 30px;
              }
          </style>
      </head>

      <body>
          <div>示例1</div>
          <div>示例2</div>
          <div>示例3</div>
          <div>示例4</div>
      </body>
      </html>    
    #+END_SRC
*** run-in类型和compat类型
    将元素指定为run-in类型或compact类型的时候,如果元素后面还有block元
    素,则run-in元素将被包含在block类型的元素内部,而compact类型的元素将
    被放置在block类型的元素左边.
** 对于盒中容纳不下的内容的显示
*** overflow属性
    指定对于盒中容纳不下的内容的显示方法.
*** overflow-x和overflow-y属性
    可以单独指定水平和垂直方向的显示方法:hidden, scroll, auto,
    visible.
*** text-overflow属性
    当通过把overflow属性的属性值设定为"hidden"方法,将盒中容纳不下的内
    容隐藏起来时,如果使用text-overflow属性,可以在盒的末尾显示一个代表
    省略的符号"...".但是只在当盒子的内容在水平方向上超出盒的容纳范围时
    有效.
** 对盒使用阴影
*** box-shadow属性的使用方法
    : box-shadow: length length length color
    前三个length分别指阴影离开文字的横向距离,纵向距离和阴影的模糊半
    径,color指阴影的颜色。
** 指定针对元素的宽度与高度的计算方法
*** box-sizing属性
    值可以设置为 content-box(默认值)和border-box.border-box不包含内部
    补白区域,以及边框的宽度与高度.
