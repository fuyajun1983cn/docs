#+STARTUP: overview
#+TITLE: Wifi驱动学习笔记（MT7668）
#+AUTHOR: 山庄来客
#+EMAIL: fuyajun1983cn@163.com
#+STARTUP: hidestars
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+HTML_HEAD: <link rel="stylesheet" title="Standard" href="css/worg.css" type="text/css" />


* 基本架构介绍
** Overal Architecture
    
    #+CAPTION: Device Driver Architecture
    [[./images/2016/2016082301.png]]
    
*** GLUE Layer
    1. Provides OS specific interface – A Driver
       Entry(Open/Start/Stop/Remove), OID/IOCTL/CFG80211 part and
       driver hooks as well.
    2. Glue Layer will access the MT6630 WLAN Core Library to
       invoke proper event to MT6630 Driver  Arbiter to complete
       the operating system’s request.

*** KAL
    Provides kernel service to WLAN Core Library, This can be
    divided into two part. 
    1. First part is OS function/library access such as memory
       access, host timer, event indication to supplicant and RX
       packet  indication.
    2. Second part is the wrapper of bus driver API or System IO
       functions used by WLAN Core library to  read/write MCR,
       send/receive incoming packets.

*** WLAN Core Library
    In MT6630 WLAN Core Library, we divide the library into 4 parts. They are
    1. A centralized Arbiter Finite State Machine and its associated event handling
    2. Management and Protocol Layer.
    3. NIC Layer to maintain SW/HW synchronization, such as TX FIFO status, TX/RX Queue Operation.
    4. HAL Layer to provide basic foundations for NIC Layer, such
       as MCR value composing, read a specific  field for MIB
       counter, A series of MCR write for a special
       function..etc.

** 主要数据结构

*** =STA_RECORD=

    Station Record , Capability and basic information of peer station 

    相关API
    1. MLME state (SAA and AAA)
       - aaaFsmRunEventRxAuth
       - saaFsmSendEventJoinComplete
       - saaFsmRunEventRxAuth
       - assocBuildCapabilityInfo
    2. Client List operation
       - cnmStaRoutinesForAbort
       - cnmStaRecAlloc
       - cnmStaRecFree
       - bssAddClient
       - bssAddClient
    3. Queue management
       - qmActivateStaRec
       - qmDeactivateStaRec
       - qmFlushStaTxQueues
       - qmFlushStaRxQueue
       - qmProcessPktWithReordering
       - qmProcessBarFrame
    4. QoS
       - mqmGenerateWmmInfoIEByStaRec
    5. STA_RECORD sync with firmware
       - cnmStaSendUpdateCmd

*** =BSS INFO=
    主要信息有：
    - AP capability and basic information 
      SSID, BSSID...
    - Operation Mode (ENUM_OP_MODE_T) - eCurrentOPMode 
      INFRASTRUCTURE, AP…
    - Connection State (ENUM_PARAM_MEDIA_STATE_T) - eConnectionState 
      Connected, Disconnected 

    相关API
    1. Init
       - cnmGetBssInfoAndInit
       - cnmFreeBssInfo
    2. AP setting
       - bssBuildBeaconProbeRespFrameCommonIEs
       - bssUpdateBeaconContent
       - p2pFuncStartGO
    3. Client List operation
       - bssAddClient
       - bssRemoveClient
       - cnmStaFreeAllStaByNetwork
    4. STA join
       - bssInitForAP
       - bssDetermineApBssInfoPhyTypeSet
       - aisUpdateBssInfoForJOIN
       - p2pFuncUpdateBssInfoForJOIN
    5. BSS sync with firmware
       - nicUpdateBss
       - nicActivateNetwork
       - nicDeactivateNetwork
       - nicQmUpdateWmmParms

*** =_GLUE_INFO_T=  && =_ADAPTER_T=
    =_ADAPTER_T= : Major data structure for driver operation, main data structure of internal protocol stack
    
    =_GLUE_INFO_T=: Major data structure for driver

    这两个数据结构相互引用，即通过任何一方可以访问到另一方。

    与网络驱动相关的数据结构之间的引用关系：
    #+BEGIN_SRC c
      // _GLUE_INFO_T 与 struct net_device
      prGlueInfo = (P_GLUE_INFO_T) wiphy_priv(prWdev->wiphy);
      gPrDev = prGlueInfo->prDevHandler;
      P_ADAPTER_T prAdapter = prGlueInfo->prAdapter ;
      P_GLUE_INFO_T prGlueInfo = prAdpater->prGlueInfo;
      P_GLUE_INFO_T prGlueInfo = (P_GLUE_INFO_T *) netdev_priv(prWdev->netdev);
    #+END_SRC

*** =_GL_P2P_INFO_T=
    p2p structure
      
** Software Modules

    #+CAPTION: Software Modules
    [[./images/2016/2016082302.png]]

    相关缩略说明如下：
    - AIS 
      Ad-Hoc, Infrastructure, Search
    - AAA
      AP(Hotspot) Auth/Assoc
    - RLM
      Radio link Management
    - QM
      Queue Management
      : prAdapter->rQM
    - BOW
      BT over Wi-Fi
    - SAA
      Station Auth/Assoc
    - RRM
      Radio Resource Measurement
    - SCN
      SCAN
    - SEC
      Security
    - CNM
      Concurrent Network Management

*** AIS FSM

*** CNM 
    Concurrent Network Management (CNM)
    - RLM(Radio Link Management) resource control
      + Channel switch
      + Configure RLM settings like TX power
    - Common database/feature management
      + BSS info/STA record
      + Timer
      + Packet allocate

    主要目的是为协调其他模块对Radio资源的访问。

    CNM has no task/thread to handle it, so its FSM controlled by :
    - HW timer interrupt
      + CTT (CATT/CPTT) Timeout
        Channel Absence/Presence Target Time
    - HEM mail box
      + Privilege Request
      + Privilege Abort
    - Function Call
      + BSS update (create/modify/remove)

        
    Important database
    - Pending List
      + Channel Privilege Request will queue here.
    - Operation Channel (OPCH)
      + Every BSS has its working channel
      + BSS with same working channel will be put into same OPCH
    
** 命令数据发送的基本流程
   
   主极有三个线程：
   1. =main_thread=
      Manage Tx Queue for data/cmd/mgmt, ioctl, interrupt.
   2. =hif_thread=
      tx send function to HIF related request
   3. =rx_thread=
      rx data/event. 

   [[./images/2016/2016091901.png]]

*** TX

        入口函数： =main_thread= , 主要处理TX请求以及中断事件。

        =main_thread= 通过该函数: kalProcessTxReq 处理TX请求。

        上层下命令经过的流程：
        1. 通过nl80211回调注册的cfg80211的接口。
        2. 通过kalloctl传递命令类型： =GLUE_FLAG_OID_BIT= , 唤醒tx thread。
        3. 调用注册的发送命令的回调接口，通过kalloctl传入的。
        4. 填写命令参数，通过 =GLUE_INFO_T= 传递， 再次唤醒tx thread
        5. tx thread解析命令参数，通过wlanSendCommand发送命令。

        #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016083001.png :cmdline -charset UTF-8
          @startuml
          participant ioctl
          participant hard_start_xmit
          participant Interrupt
          participant Main_Thread
          participant netif_rx
          autonumber
          activate hard_start_xmit
          hard_start_xmit -> Main_Thread: send packets
          activate Main_Thread
          deactivate hard_start_xmit
          Main_Thread -> Main_Thread: Send Tx Packets
          activate Interrupt
          Interrupt -> Main_Thread: Tx Interrupt
          deactivate Interrupt
          Main_Thread -> Main_Thread: Handle Tx done Interrupt,\n Queue mgmt flow control
          deactivate Main_Thread
          @enduml
        #+END_SRC

        #+RESULTS:

        [[file:./images/2016/2016083001.png]]

        wlanProcessTxFrame, 这个函数由kalHardStartXmit()或
        nicProcessForwardPkt()调用。

        wlanProcessTxFrame这个函数目的有：
        1. 确定数据的优先级。
        2. 设置Packet的相关信息： 头部长度，到达时间等信息。

**** 解析上层发送过来的数据包信息
     #+BEGIN_SRC c
       #define WLAN_GET_FIELD_BE16(_memAddr_p, _value_p) \
           { \
               PUINT_8 __cp = (PUINT_8)(_memAddr_p); \
               ,*(PUINT_16)(_value_p) = ((UINT_16)__cp[0] << 8) | ((UINT_16)__cp[1]); \
           }

       BOOLEAN
       kalQoSFrameClassifierAndPacketInfo(IN P_GLUE_INFO_T prGlueInfo,
                          IN P_NATIVE_PACKET prPacket, OUT P_TX_PACKET_INFO prTxPktInfo)
       {
           UINT_32 u4PacketLen;
           UINT_16 u2EtherTypeLen; /*数据包的类型*/
           struct sk_buff *prSkb = (struct sk_buff *)prPacket;
           PUINT_8 aucLookAheadBuf = NULL;
           UINT_8 ucEthTypeLenOffset = ETHER_HEADER_LEN - ETHER_TYPE_LEN;
           PUINT_8 pucNextProtocol = NULL;
           UINT_16 u2KeyInfo = 0;
           UINT_8  ucEAPoLKey = 0;
           UINT_8  ucEapOffset = ETHER_HEADER_LEN;

           u4PacketLen = prSkb->len;

           if (u4PacketLen < ETHER_HEADER_LEN) {
               DBGLOG(INIT, WARN, "Invalid Ether packet length: %lu\n", u4PacketLen);
               return FALSE;
           }

           aucLookAheadBuf = prSkb->data; /*struct sk_buff 的数据部分起始位置 */

           /* Reset Packet Info */
           kalMemZero(prTxPktInfo, sizeof(TX_PACKET_INFO));

           /* 4 <0> Obtain Ether Type/Len 网络包是大端格式*/
           WLAN_GET_FIELD_BE16(&aucLookAheadBuf[ucEthTypeLenOffset], &u2EtherTypeLen);

           /* 4 <1> Skip 802.1Q header (VLAN Tagging) */
           if (u2EtherTypeLen == ETH_P_VLAN) {
               prTxPktInfo->u2Flag |= BIT(ENUM_PKT_VLAN_EXIST);
               ucEthTypeLenOffset += ETH_802_1Q_HEADER_LEN;
               WLAN_GET_FIELD_BE16(&aucLookAheadBuf[ucEthTypeLenOffset], &u2EtherTypeLen);
           }
           /* 4 <2> Obtain next protocol pointer */
           pucNextProtocol = &aucLookAheadBuf[ucEthTypeLenOffset + ETHER_TYPE_LEN];

           /* 4 <3> Handle ethernet format */
           switch (u2EtherTypeLen) {

               /* IPv4 */
           case ETH_P_IPV4:
               /* IPv4 header length check */
               if (u4PacketLen < (ucEthTypeLenOffset + ETHER_TYPE_LEN + IPV4_HDR_LEN)) {
                   DBGLOG(INIT, WARN, "Invalid IPv4 packet length: %lu\n", u4PacketLen);
                   break;
               }

               kalIPv4FrameClassifier(prGlueInfo, prPacket, pucNextProtocol, prTxPktInfo);
               break;

       #if 0
               /* IPv6 */
           case ETH_P_IPV6:
               {
                   PUINT_8 pucIpHdr = pucNextProtocol;
                   UINT_8 ucIpVersion;

                   /* IPv6 header length check */
                   if (u4PacketLen < (ucEthTypeLenOffset + ETHER_TYPE_LEN + IPV6_HDR_LEN)) {
                       DBGLOG(INIT, WARN, "Invalid IPv6 packet length: %lu\n", u4PacketLen);
                       return FALSE;
                   }

                   /* IPv6 version check */
                   ucIpVersion = (pucIpHdr[0] & IP_VERSION_MASK) >> IP_VERSION_OFFSET;
                   if (ucIpVersion != IP_VERSION_6) {
                       DBGLOG(INIT, WARN, "Invalid IPv6 packet version: %u\n", ucIpVersion);
                       return FALSE;
                   }

                   /* Get the DSCP value from the header of IP packet. */
                   ucUserPriority = ((pucIpHdr[0] & IPV6_HDR_TC_PREC_MASK) >> IPV6_HDR_TC_PREC_OFFSET);
               }
               break;
       #endif

           case ETH_P_ARP:
               {
                   UINT_16 u2ArpOp;

                   WLAN_GET_FIELD_BE16(&pucNextProtocol[ARP_OPERATION_OFFSET], &u2ArpOp);

                   DBGLOG(SW4, INFO, "ARP %s PKT[0x%p] TAR MAC/IP[" MACSTR "]/[" IPV4STR "]\n",
                          u2ArpOp == ARP_OPERATION_REQUEST ? "REQ" : "RSP",
                          prPacket, MAC2STR(&pucNextProtocol[ARP_TARGET_MAC_OFFSET]),
                          IPV4TOSTR(&pucNextProtocol[ARP_TARGET_IP_OFFSET]));

                   prTxPktInfo->u2Flag |= BIT(ENUM_PKT_ARP);
               }
               break;

           case ETH_P_1X:
           case ETH_P_PRE_1X:
       #if CFG_SUPPORT_WAPI
           case ETH_WPI_1X:
       #endif
               prTxPktInfo->u2Flag |= BIT(ENUM_PKT_1X);
               DBGLOG(RSN, INFO, "T1x like normal data, PKT[0x%p]\n", prPacket);

               if (u2EtherTypeLen == ETH_P_1X) {
                   /* Leave EAP to check */
                   ucEAPoLKey = aucLookAheadBuf[1 + ucEapOffset];
                   if (ucEAPoLKey != ETH_EAPOL_KEY)
                       prTxPktInfo->u2Flag |= BIT(ENUM_PKT_NON_PROTECTED_1X);
                   else {
                       WLAN_GET_FIELD_BE16(&aucLookAheadBuf[5 + ucEapOffset], &u2KeyInfo);
                       /* BIT3 is pairwise key bit */
                       DBGLOG(RSN, INFO, "u2KeyInfo=%d\n", u2KeyInfo);
                       if (u2KeyInfo & BIT(3))
                           prTxPktInfo->u2Flag |= BIT(ENUM_PKT_NON_PROTECTED_1X);
                   }
               }
       #if CFG_SUPPORT_WAPI
               else if (u2EtherTypeLen == ETH_WPI_1X)
                   prTxPktInfo->u2Flag |= BIT(ENUM_PKT_NON_PROTECTED_1X);
       #endif
               break;

           default:
               /* 4 <4> Handle 802.3 format if LEN <= 1500 */
               if (u2EtherTypeLen <= ETH_802_3_MAX_LEN)
                   prTxPktInfo->u2Flag |= BIT(ENUM_PKT_802_3);
               break;
           }

           /* 4 <4.1> Check for PAL (BT over Wi-Fi) */
           /* Move to kalBowFrameClassifier */

           /* 4 <5> Return the value of Priority Parameter. */
           /* prSkb->priority is assigned by Linux wireless utility function(cfg80211_classify8021d) */
           /* at net_dev selection callback (ndo_select_queue) */
           prTxPktInfo->ucPriorityParam = prSkb->priority;

           /* 4 <6> Retrieve Packet Information - DA */
           /* Packet Length/ Destination Address */
           prTxPktInfo->u4PacketLen = u4PacketLen;

           kalMemCopy(prTxPktInfo->aucEthDestAddr, aucLookAheadBuf, PARAM_MAC_ADDR_LEN);

           return TRUE;
       }               /* end of kalQoSFrameClassifier() */     
     #+END_SRC


*** RX

         #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016083002.png :cmdline -charset UTF-8
           @startuml
           participant ioctl
           participant hard_start_xmit
           participant Interrupt
           participant Main_Thread
           participant netif_rx
           autonumber
           activate Interrupt
           Interrupt -> Main_Thread: Rx Interrupt
           deactivate Interrupt
           activate Main_Thread
           Main_Thread -> Main_Thread: Handle Rx Interrupt,\n Read Rx Packets
           Main_Thread -> netif_rx
           activate netif_rx
           netif_rx -> netif_rx: Rx indication to kernel
           netif_rx -> Main_Thread: return
           deactivate netif_rx
           deactivate Main_Thread
           @enduml
         #+END_SRC

         #+RESULTS:
         [[file:./images/2016/2016083002.png]]

         SDIO RX can only go to CR4 (PP->CR4->HIF)
         USB RX can use either CR4 (PP->CR4->HIF) or directly to HIF
         (PP->HIF)

**** 数据帧处理
     nicRxProcessDataPacket

     向上回报一个数据包： kalRxIndicateOnePkt。

*** FW download
       
        函数调用流程：
        1. wlanProbe
        2. wlanAdapterStart
        3. wlanDownloadFW
           - Download Patch
           - Download N9
           - Download CR4 FW
        4. Bulk out to USB

*** Reference Charts
     
        [[./images/2016/2016083003.png]]

** 编译
   為當初SDIO開發時候只有x86 PC跟HE兩種平台 
   这个宏 =MTK_WCN_HIF_SDIO= 要定义为0。

** 配置项
   1. 用版子的efuse設定
      : EfuseBufferModeCal 0
   2. 需要p2p concurrent interface
      : RegP2pIfAtProbe 1
   3. 需要DBDC
      : DbdcMode 2
    
* 调试

** FixedRate Iwpriv CMD
   有兩種方法,  建議用第一種：
   1. 命令格式
      : iwpriv wlanXX driver fixedrate=[WCID]-[Mode]-[BW]-[MCS]-[VhtNss]-[SGI]-[Preamble]-[STBC]-[LDPC]-[SPE_EN]
      其中，WCID未support， 使用示例：
      : iwpriv wlan0 driver fixedrate=1-2-1-7-0-0-0-0-0-0

      相关说明：
      - WCID
        WTBL Index, meaningless in FW now, and will take effect on all connected peer

      - Mode
        0: CCK   1: Legacy OFDM   2: HT   3: GF   4: VHT

      - BW
        0: BW20   1: BW40   2: BW80   3: BW160

      - MCS
        CCK: 0-3   OFDM: 0-7    HT: 0-32   VHT: 0-9

      - VhtNss
        1-2 for VHT only

      - SGI
        0: Disable all BW SGI   1: Enable all BW SGI

      - Preamble    
        0: Long   1: Short

      - STBC
        0: Disable   1: Enable

      - LDPC
        0: Disable   1: Enable

      - SPE_EN
        0: Disable   1: Enable
      
   2. 命令格式
       : iwpriv wlanXX driver “set_sw_ctrl 0xa0620000 <ratecode>”
      使用示例：
      : iwpriv wlanXX driver “set_sw_ctrl 0xa0620001 0x1”

      
   相关说明：
   <Ratecode> rule
   bit[31]: 0x1  -> fix rate
   bit[30]: SGI enable
   bit[29]: LDPC enable
   bit[11]: STBC enable
   bit[10:9]: Nsts (0x00 means 1 Nsts)
   bit[8:0]: TX mode and rate (請參考以下coding)
   
   bit[8:0]: TX mode and rate

    "VHT_MCS0"=>0x100,                 
    "VHT_MCS1"=>0x101,                 
    "VHT_MCS2"=>0x102,                    
    "VHT_MCS3"=>0x103,
    "VHT_MCS4"=>0x104,
    "VHT_MCS5"=>0x105,
    "VHT_MCS6"=>0x106,
   "VHT_MCS7"=>0x107,
    "VHT_MCS8"=>0x108,
    "VHT_MCS9"=>0x109,

    "HT_MCS0"=>0x80,
    "HT_MCS1"=>0x81,
    "HT_MCS2"=>0x82,
    "HT_MCS3"=>0x83,
    "HT_MCS4"=>0x84,
    "HT_MCS5"=>0x85,
    "HT_MCS6"=>0x86,
    "HT_MCS7"=>0x87,
    
    "54M"=>0x4C,
    "48M"=>0x48,
    "36M"=>0x4D,
   "24M"=>0x49,
    "18M"=>0x4E,
    "12M"=>0x4A,
   "9M"=>0x4F,
    "6M"=>0x4B,
    
    "11M"=>0x7,           
    "5.5M"=>0x06,
    "2M"=>0x05,
    "1M"=>0x00,

** 吞吐量问题分析建议
   当客户报怨网速不够快时，应该从以下几个方面入手：
   1. 使用一些工具实地测试一下客户环境下的网络速率
      - 使用iperf工具
        通过不同情况下的对比（比如内网与外网环境下）
        确认是否为特定AP的问题，如果是AP的问题，找一个正常的AP与非正常
        的AP进行对比分析。
   2. 如果仍然怀疑吞吐量问题，进一步从以下几个方面入手：
      - 调整与AP的距离，对比测试一下。
        关注RSSI以及SNR等信息。
      - 切换不同的网络模式，看结果是否有差异
        重点关注bandwidth的情况，是否有使用到channel bonding。检查GI以
        及RIFS等信息。
      - 检查数据传输速率是否异常
        最低传输速率的配置。
      - 一些重点Check项
        + channel utilization
        + Packet aggregation method in use
        + check if we are doing AMSDU v/s AMPDU.
          AMSDU中比较脏的环境下，只要其中一包数据传输错误，整个AMSDU都
          会重新传输。
        + 分片情况
        + 确保11n的速率是使能的。
   3. 速率参考
      - Maximun Theoritical Wireless Speeds
        + 802.11b - 11 Mbps (2.4GHz)
        + 802.11a - 54 Mbps (5 GHz)
        + 802.11g - 54 Mbps (2.4GHz)
        + 802.11n - 600 Mbps (2.4GHz and 5 GHz)
        + 802.11ac - 1300 Mbps (5 GHz)
      - Actual Real-World Average Wireless Speeds
        + 802.11b - 2-3 Mbps downstream (bi-directional data rates can be lower)
        + 802.11g - ~20 Mbps downstream
        + 802.11n - 40-50 Mbps typical, varying greatly depending on
          configuration, whether it is mixed or N-only network, the
          number of bonded channels, etc. Specifying a channel, and
          using 40MHz channels can help achieve 70-80Mbps with some
          newer routers.
        + 802.11ac - 70-100 Mbps

** 常用API
*** 获取当前Sta Rec信息
    : prStaRec = cnmGetStaRecByIndex(prAdapter, prSwRfb->ucStaRecIdx);
    : prStaRec = cnmGetStaRecByIndex(prAdapter, prMsduInfo->ucStaRecIndex);
    : prStaRec = cnmGetStaRecByAddress(prAdapter, (UINT_8) prAdapter->prAisBssInfo->ucBssIndex, mac);

*** 获取当前BSS信息
    : prBssInfo = GET_BSS_INFO_BY_INDEX(prAdapter, prStaRec->ucBssIndex);
    : prBssInfo = prAdapter->aprBssInfo[prMsduInfo->ucBssIndex];
         
*** 获取两个全局变量的实例
    : prGlueInfo = (P_GLUE_INFO_T) wiphy_priv(wiphy);
    : prAdapter = prGlueInfo->prAdapter;

** Log开关
    - 檢查debug level 
      : cat /proc/net/wlan/dbg_level
    - 关闭日志
      :  echo 0xff:0x00 > /proc/net/wlan/dbg_level
    - 打开日志
      : echo 0xff:0xbf > /proc/net/wlan/dbg_level
      : echo 0xff:0xbf > /proc/net/wlan/dbg_level    (INFO)
    - 打开FW日志
      : iwpriv wlan0 driver "SET_FWLOG 1 1"
      : iwpriv wlan0 driver "SET_FWLOG 0 1"

** 客户平台

*** ZTE
    加载KO前，输入：
    : echo 1 > /sys/class/remount/need_remount
    : ioctl /dev/wifi_power 27907 (on)
    :  ioctl /dev/wifi_power 27906 (off)

    4-bit需要加载添加如下命令(set async interrupt)：
    : iwpriv wlan0 driver "set_drv_mcr 0x8 0xf"
    
    替换dt.img(uboot命令行中):
    : usb start ; fatload usb 0  12000000 dt.img  ; store dtb write 12000000 256

    替换boot.img的方法(Android启动后):
    : dd if=boot.img of=/dev/block/boot

    启动softap时，输入如下命令：
    : insmod wlan_mt7668.ko sta=wlan p2p=p2p ap=ap

**** 问题列表 
     1. ping包延迟很大
        先将wifi.cfg中的SetChip0 KeepFullPwr 1， 发现ping 包延迟正常了。

**** Release Notes

***** 2017/2/10
      1.只做Verification , 不做Calibration . 詳細內容我們有跟志軍討論 . 
      2. 附件為wifitestool文檔 , 請參考2.3節的verification flow .
      3. 請配合新版wifi driver
         “MT7668_WIFI_DRV_SDIO_ZTE_V1.0.1.3.tgz”, 才能使用此新
         版wifitesttool . 
      4.此新版wifi driver & wifitesttool是for PVT硬件使用 . 如果
         用在現有硬件上 , Tx power會不準 , 但還是可以驗證PVT的
         flow . 
      5.記得要將”EEPROM_MT7668_170209.rar”內容放到/etc/firmware路徑下 .


